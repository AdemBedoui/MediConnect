III. 
Architecture de la solution :  
Scrum Master (SM) 
Mme Manel Bel Arbi 
Mr walid Saadaoui 
Figure 17 : L’équipe de Scrum 
Equipe de 
Développement 
Yahyaoui Rania 
L'architecture de la solution fait référence à la structure globale et à l'organisation des 
différents composants et systèmes qui constituent une application. Elle définit la manière dont 
ces composants interagissent et coopèrent pour atteindre les objectifs de l'application. 
1. Le modèle MVC : 
Figure 18 : L’architecture MVC 
L'architecture MVC (Modèle-Vue-Contrôleur) est un modèle de conception couramment 
utilisé dans le développement d'applications web. Il offre une structure organisée pour séparer 
les différentes responsabilités d'une application, ce qui facilite la maintenance, la réutilisation 
du code et la collaboration entre les développeurs. 
Voici une explication plus détaillée des trois composants de l'architecture MVC : 
21 
 Modèle (Model) : Le modèle représente les données de l'application ainsi que la logique 
métier associée. Il peut être considéré comme la couche de données de l'application. Le 
modèle est responsable de l'accès aux données, de leur manipulation et de leur validation. Il 
encapsule la logique métier de l'application, telle que les règles de traitement des données, les 
opérations de calcul, etc.  
 Vue (View) : La vue est responsable de l'affichage des données au sein de l'interface 
utilisateur. Elle présente les informations au format approprié pour les utilisateurs. La vue est 
généralement définie à l'aide de langages de balisage (comme HTML) et peut être enrichie 
avec des langages de présentation (comme CSS) pour améliorer l'apparence et le style. Elle 
est étroitement liée au modèle car elle utilise les données du modèle pour afficher les 
informations.  
 Contrôleur (Controller) : Le contrôleur agit comme un intermédiaire entre le modèle et la vue. 
Il reçoit les interactions de l'utilisateur et prend les décisions appropriées pour mettre à jour le 
modèle et rafraîchir la vue en conséquence. Le contrôleur est responsable de la gestion des 
actions de l'utilisateur, telles que les clics de bouton, les soumissions de formulaires, etc. 
2. L’avantage du modèle MVC :  
 En utilisant l'architecture MVC, les développeurs peuvent collaborer plus facilement, car 
chaque composant peut être développé indépendamment et testé séparément. De plus, la 
structure claire de l'architecture MVC facilite la compréhension du code et permet aux 
développeurs de travailler de manière plus efficace et cohérente. 
 Le modèle MVC permet de séparer les responsabilités dans une application. 
 Il permet de formaliser une application. 
 Il sera plus facile pour une tierce personne de comprendre la structure de 
l'application basé sur le modèle MVC. 
 Il permet de créer des limites très claires et bien définies entre les différents 
morceaux de code. La réutilisabilité est alors beaucoup plus facile. 
22 
3. API : 
a. Les services RESTFUL API 
Pendant notre stage nous avons utilisé les 
services RESTful API pour lier la partie    
Frontend avec la partie Backend.  
b. API : 
Une API est un ensemble de définitions et 
de protocoles permettant de créer et d'intégrer des 
logiciels d'application. On parle parfois de contrat entre un fournisseur d'informations et un 
utilisateur d'informations, établissant le contenu 
requis du consommateur (l'appel) et le contenu 
requis par le producteur (la réponse).           
Figure 19 : API 
c. API RESTful : 
Une API RESTful. REST signifie 
Representational State Transfer et est un 
style architectural pour la communication 
réseau entre les applications, qui repose sur un 
protocole sans état (généralement HTTP) pour 
l'interaction.   
d. Les verbes HTTP représentent des actions: 
Figure 20 : Les verbes HTTP 
Dans les API RESTful, nous utilisons les verbes HTTP comme actions, et les 
points de terminaison sont les ressources sur lesquelles agir. Nous utiliserons les 
verbes HTTP pour leur signification sémantique. 